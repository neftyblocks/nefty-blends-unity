/**
 * @greymass/miniaes v1.0.0
 * https://github.com/greymass/miniaes-js
 *
 * @license
 * Copyright (c) 2021 FFF00 Agents AB & Greymass Inc. All Rights Reserved.
 * 
 * Redistribution and use in source and binary forms, with or without modification,
 * are permitted provided that the following conditions are met:
 * 
 *  1. Redistribution of source code must retain the above copyright notice, this
 *     list of conditions and the following disclaimer.
 * 
 *  2. Redistribution in binary form must reproduce the above copyright notice,
 *     this list of conditions and the following disclaimer in the documentation
 *     and/or other materials provided with the distribution.
 * 
 *  3. Neither the name of the copyright holder nor the names of its contributors
 *     may be used to endorse or promote products derived from this software without
 *     specific prior written permission.
 * 
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
 * IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
 * INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
 * BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
 * LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE
 * OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED
 * OF THE POSSIBILITY OF SUCH DAMAGE.
 * 
 * YOU ACKNOWLEDGE THAT THIS SOFTWARE IS NOT DESIGNED, LICENSED OR INTENDED FOR USE
 * IN THE DESIGN, CONSTRUCTION, OPERATION OR MAINTENANCE OF ANY MILITARY FACILITY.
 */
declare class AES {
    readonly heap: Uint8Array;
    readonly asm: any;
    readonly mode: string;
    readonly padding: boolean;
    pos: number;
    len: number;
    constructor(key: Uint8Array, iv: Uint8Array | undefined, padding: boolean | undefined, mode: 'CBC');
    AES_Encrypt_process(data: Uint8Array): Uint8Array;
    AES_Encrypt_finish(): Uint8Array;
    AES_Decrypt_process(data: Uint8Array): Uint8Array;
    AES_Decrypt_finish(): Uint8Array;
}

declare class AES_CBC {
    private aes;
    static encrypt(data: Uint8Array, key: Uint8Array, padding?: boolean, iv?: Uint8Array): Uint8Array;
    static decrypt(data: Uint8Array, key: Uint8Array, padding?: boolean, iv?: Uint8Array): Uint8Array;
    constructor(key: Uint8Array, iv?: Uint8Array, padding?: boolean, aes?: AES);
    encrypt(data: Uint8Array): Uint8Array;
    decrypt(data: Uint8Array): Uint8Array;
}

export { AES, AES_CBC };
